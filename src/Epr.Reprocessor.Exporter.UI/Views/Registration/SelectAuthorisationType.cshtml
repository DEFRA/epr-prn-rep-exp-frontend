﻿@using Epr.Reprocessor.Exporter.UI.App.Constants
@using Epr.Reprocessor.Exporter.UI.App.Enums.Registration
@using Epr.Reprocessor.Exporter.UI.ViewModels.Registration
@model SelectAuthorisationTypeViewModel
@{
	ViewData["Title"] = Localizer["page_title"];
	ViewData["PageDescription"] = Localizer["page_description"];
	var errorsViewModel = new ErrorsViewModel(ViewData.ModelState.ToErrorDictionary(), Localizer);
}

<form asp-controller="Registration" asp-action="SelectAuthorisationType" method="post">

	<div class="govuk-form-group@(!ViewData.ModelState.IsValid ? " govuk-form-group--error" : "")">
		<fieldset class="govuk-fieldset">
			<legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
				<h1 class="govuk-fieldset__heading"> @Localizer["which_type_of_permit_does_the_site_have_for_accepting_and_recycling", @Model.SelectedMaterial.ToString()]</h1>
			</legend>
			@if (!ViewData.ModelState.IsValid)
			{
				@await Html.PartialAsync("Partials/Govuk/_Error", ViewData.ModelState.GetModelStateEntry("SelectedAuthorisation"))

			}
			<div class="govuk-radios" data-module="govuk-radios">

				@for (var i = 0; i < Model.AuthorisationTypes.Count; i++)
				{
					var options = Model.AuthorisationTypes[i];
					var isChecked = Model.SelectedAuthorisation == options.Id;
					var idValue = options == Model.AuthorisationTypes.FirstOrDefault() ? "SelectedAuthorisation" : $"SelectedAuthorisation-{i}";
					var nameValue = Localizer[$"{options.Name}"];
					var labelValue = Localizer[$"{options.Label}"];

					var requiresAriaControls = !string.IsNullOrEmpty(options.Label);
					var ariaControls = requiresAriaControls ? $"input-for-{@options.Id}" : null;
					<div class="govuk-radios__item">
						@Html.RadioButtonFor(x => x.SelectedAuthorisation, options.Id, new { Id = idValue, name = idValue, @class = "govuk-radios__input", @checked = isChecked, @data_testid = $"PermitType{options.Name}", @aria_label = $"PermitType {nameValue}", @aria_controls = ariaControls})
						<label class="govuk-label govuk-radios__label"
						for="@idValue"
						gov-value="AuthorisationTypes.SelectedAuthorisationText[@i]"
						gov-first-option="true">
							@nameValue
						</label>
					</div>

					@if (!string.IsNullOrEmpty(options.Label))
					{
						var currentPermit = Model.AuthorisationTypes[i];
						var currentPermitFullName = (MaterialPermitType)currentPermit.Id!;
						var permitNumberId = $"{currentPermitFullName}_number_input";
						var formGroupCss = "govuk-form-group";
						if (errorsViewModel.HasErrorKey(permitNumberId))
						{
							formGroupCss = "govuk-form-group--error";
						}

						var permitNumberInputCss = "govuk-input govuk-input--width-10";
						if (errorsViewModel.HasErrorKey(permitNumberId))
						{
							permitNumberInputCss += " govuk-input--error";
						}

						<div class="govuk-radios__conditional" id="input-for-@options.Id">
							<div class="@formGroupCss">
								<label class="govuk-label" for="AuthorisationTypes[@i].SelectedAuthorisationText">
									@labelValue
								</label>

								@if (ViewData.ModelState.ContainsKey(permitNumberId) && !ViewData.ModelState.IsValid)
								{
									var key = ViewData.ModelState.GetModelStateEntry(permitNumberId).Value.Errors.FirstOrDefault()!.ErrorMessage;

									<p id="@(key)-error" class="govuk-error-message">
										<span class="govuk-visually-hidden">@SharedLocalizer["hidden_error"]</span> @Localizer[$"{key}"]
									</p>

								}
								@Html.TextBoxFor(x => Model.AuthorisationTypes[i].SelectedAuthorisationText, new
								{
									id = permitNumberId,
									@aria_label = "AuthorisationPermitType",
									@class = permitNumberInputCss
								})
							</div>

						</div>
					}
					@Html.HiddenFor(x => x.AuthorisationTypes[i].Id)
					@Html.HiddenFor(x => x.AuthorisationTypes[i].Name)
					@Html.HiddenFor(x => x.AuthorisationTypes[i].SelectedAuthorisationText)
					@Html.HiddenFor(x => x.AuthorisationTypes[i].Label)
				}

				@Html.HiddenFor(x => x.NationCode)
				@Html.HiddenFor(x => x.SelectedMaterial)

			</div>
		</fieldset>
	</div>
	<div class="govuk-button-group">
		<button type="submit" class="govuk-button" data-module="govuk-button" asp-route-buttonAction="SaveAndContinue">
			@SharedLocalizer["saveandcontinue"]
		</button>
		<button type="submit" class="govuk-button govuk-button--secondary" data-module="govuk-button" asp-route-buttonAction="SaveAndComeBackLater">
			@SharedLocalizer["saveandcomebacklater"]
		</button>
	</div>
</form>

@section Styles {
	<link href="~/css/registration-radio-buttons.css" rel="stylesheet" />
}