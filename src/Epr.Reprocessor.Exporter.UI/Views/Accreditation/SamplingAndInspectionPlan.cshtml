@using Epr.Reprocessor.Exporter.UI.ViewModels.Accreditation
@using Epr.Reprocessor.Exporter.UI.Helpers
@model SamplingAndInspectionPlanViewModel

@{
	ViewData["Title"] = Localizer["page_title"];
	ViewData["PageDescription"] = Localizer["page_description"];
	
	var errorsVM = new ErrorsViewModel(ViewData.ModelState.ToErrorDictionary(), Localizer);
	var uploadedFilesHeader = Localizer["uploaded_files"];
	var dateUploadedHeader = Localizer["date_uploaded"];
	var uploadedByHeader = Localizer["uploaded_by"];
	var removeHeader = Localizer["remove"];
}

<main class="govuk-main-wrapper govuk-!-padding-top-4" id="main-content" role="main">
	<div class="govuk-grid-row">
		<div class="govuk-grid-column-full">
			<vc:notification-banner model="@Model.SuccessBanner"></vc:notification-banner>

			@if (!ViewData.ModelState.IsValid)
			{
				@await Html.PartialAsync("Partials/Govuk/_ErrorSummary", errorsVM)
			}

			@using (Html.BeginForm("SamplingAndInspectionPlan", "Accreditation", FormMethod.Post, new
			{
				enctype = "multipart/form-data"
			}))
			{
				@Html.HiddenFor(m => m.AccreditationId)
				@Html.HiddenFor(m => m.ApplicationTypeId)

				<h1 class="govuk-heading-l" id="heading">
					@Localizer["heading"]
				</h1>

				<p class="govuk-body">@Localizer["file_requirements_text"]</p>

				<div class="govuk-form-group @(ViewData.ModelState.IsValid ? string.Empty : "govuk-form-group--error")">

					@if (!ViewData.ModelState.IsValid)
					{
						@await Html.PartialAsync("Partials/Govuk/_Error", ViewData.ModelState.GetModelStateEntry(Constants.UploadFieldName))
					}
					<label class="govuk-label" for="upload-file">
						@Localizer["upload_a_file"]
					</label>
					<input class="govuk-file-upload" title="Choose a file" id="upload-file" name="file" type="file">
					<button class="govuk-button govuk-button--secondary" data-module="govuk-button" data-testid="@Constants.UploadAction" name="action" value="@Constants.UploadAction">
						@Localizer["upload"]
					</button>
				</div>

				@if (Model.UploadedFiles != null && Model.UploadedFiles.Count > 0)
				{
					<table class="govuk-table govuk-!-margin-bottom-8">
						<caption class="govuk-visually-hidden">@uploadedFilesHeader</caption>
						<thead class="govuk-table__head">
							<tr class="govuk-table__row">
								<th scope="col" class="govuk-table__header">@uploadedFilesHeader</th>
								<th scope="col" class="govuk-table__header">@dateUploadedHeader</th>
								<th scope="col" class="govuk-table__header">@uploadedByHeader</th>
								<th scope="col" class="govuk-table__header"><span class="govuk-visually-hidden">@removeHeader</span></th>
							</tr>
						</thead>
						<tbody class="govuk-table__body">
						@foreach (var file in Model.UploadedFiles)
						{
							<tr class="govuk-table__row">
								<td class="govuk-table__cell" data-heading="@uploadedFilesHeader">
									<a class="govuk-link--no-visited-state" href="@file.DownloadFileUrl">@file.FileName</a>
								</td>
								<td class="govuk-table__cell" data-heading="@dateUploadedHeader">@file.DateUploaded.ToString("dd MMM yyyy HH:mm:ss")</td>
								<td class="govuk-table__cell" data-heading="@uploadedByHeader">@file.UploadedBy</td>
									<td class="govuk-table__cell" data-heading="@removeHeader">
										<a class="govuk-link--no-visited-state" href="@file.DeleteFileUrl" data-testid="delete-@file.FileName">@removeHeader <span class="govuk-visually-hidden"> file</span></a>
								</td>
							</tr>
						}
						</tbody>
					</table>
				}

				<div class="govuk-button-group">
					<button class="govuk-button" data-module="govuk-button" data-testid="@Constants.ContinueAction" name="action" value="@Constants.ContinueAction">
						@Localizer["saveandcontinue"]
					</button>
					<button class="govuk-button govuk-button--secondary" data-module="govuk-button" data-testid="@Constants.SaveAction" name="action" value="@Constants.SaveAction">
						@Localizer["saveandcomebacklater"]
					</button>
				</div>
			}
		</div>
	</div>
</main>
