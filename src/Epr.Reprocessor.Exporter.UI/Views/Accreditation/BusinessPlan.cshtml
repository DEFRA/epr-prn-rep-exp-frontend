@using Epr.Reprocessor.Exporter.UI.App.Constants
@using Epr.Reprocessor.Exporter.UI.ViewModels.Accreditation
@using Epr.Reprocessor.Exporter.UI.ViewModels.Shared
@using Epr.Reprocessor.Exporter.UI.Helpers
@model BusinessPlanViewModel;
@{
    ViewData["Title"] = Localizer["title"];
    ViewData["PageDescription"] = Localizer["page_description"];
    var scriptNonce = (string?)Context.Items[ContextKeys.ScriptNonceKey];
    var errorsVM = new ErrorsViewModel(ViewData.ModelState.ToErrorDictionary(), Localizer);
}

<div class="govuk-width-container">
    <main class="govuk-main-wrapper govuk-!-padding-top-4" id="main-content" role="main">
        <div class="govuk-grid-row">
            <div class="govuk-grid-column-full">

                @if (!ViewData.ModelState.IsValid)
                {
                    @await Html.PartialAsync("Partials/Govuk/_ErrorSummary", errorsVM)
                }

                @using (Html.BeginForm("BusinessPlan", "Accreditation", FormMethod.Post))
                {
                    @Html.HiddenFor(m => m.ExternalId)
                    @Html.HiddenFor(m => m.MaterialName)
                    @Html.HiddenFor(m => m.Subject)

                    <div class="govuk-form-group">
                        <fieldset class="govuk-fieldset" aria-describedby="lead_para_1">
                            <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
                                <h1 class="govuk-fieldset__heading" id="heading">
                                    @Localizer["heading"]
                                </h1>
                            </legend>

                            <div id="lead_para_1" class="govuk-hint">
                                @(string.Format(Localizer["lead_para_1"].Value, Model.MaterialName.ToLower(), Model.Subject))
                            </div>

                            <div id="lead_para_2" class="govuk-hint">
                                @Localizer["lead_para_2"]
                            </div>
                            <br>

                            @foreach (var field in new[]
                            {
                                new {FieldName = "InfrastructurePercentage", Label = "new_reprocessing_infrastructure"},
                                new {FieldName = "PackagingWastePercentage", Label = "price_support"},
                                new {FieldName = "BusinessCollectionsPercentage", Label = "support_for_business_collections"},
                                new {FieldName = "CommunicationsPercentage", Label = "communications"},
                                new {FieldName = "NewMarketsPercentage", Label = "developing_new_markets"},
                                new {FieldName = "NewUsesPercentage", Label = "developing_new_uses_for_recycled_waste"},
                                new {FieldName = "OtherPercentage", Label = "activities_or_investments"}
                            })
                            {
                                @await Html.PartialAsync("Partials/Govuk/_PercentageInput", new InputFieldViewModel
                                {
                                    FieldName = field.FieldName,
                                    Value = Model.GetType().GetProperty(field.FieldName)?.GetValue(Model)?.ToString(),
                                    LabelText = Localizer[field.Label].Value,
                                    LabelDesc = Localizer["label_enter_whole_percentage"].Value,
                                    HasError = ViewData.ModelState[field.FieldName]?.Errors?.Count > 0,
                                    ErrorMessage = ViewData.ModelState[field.FieldName]?.Errors.FirstOrDefault()?.ErrorMessage,
                                })
                            }

                            <br>

                            <div class="govuk-warning-text">
                                <span class="govuk-warning-text__icon" aria-hidden="true">!</span>
                                <strong class="govuk-warning-text__text">
                                    <span class="govuk-visually-hidden">Warning</span>
                                    @Localizer["warning_total_must_be_100"]
                                </strong>
                            </div>

                            @await Html.PartialAsync("Partials/Govuk/_PercentageInput", new InputFieldViewModel
                            {
                               FieldName = "TotalEntered",
                               LabelText = @Localizer["total_entered"].Value,
                               HasError = ViewData.ModelState["TotalEntered"]?.Errors?.Count > 0,
                               ErrorMessage = ViewData.ModelState["TotalEntered"]?.Errors.FirstOrDefault()?.ErrorMessage,
                               IsDisabled = true
                            })

                        </fieldset>
                    </div>
                    <br>

                    <div class="govuk-button-group">
                        <button class="govuk-button" data-module="govuk-button" data-testid="@Constants.ContinueAction" name="action" value="@Constants.ContinueAction">
                            @SharedLocalizer["saveandcontinue"]
                        </button>
                        <button class="govuk-button govuk-button--secondary" data-module="govuk-button" data-testid="@Constants.SaveAction" name="action" value="@Constants.SaveAction">
                            @SharedLocalizer["saveandcomebacklater"]
                        </button>
                    </div>
                }
            </div>
        </div>
    </main>
   
</div>

@section Scripts {
    <script type="text/javascript" nonce="@scriptNonce">
        const inputs = document.querySelectorAll('input[type="text"]:not(#TotalEntered)');
        const totalDisplay = document.getElementById("TotalEntered");

        function isValidWholeNumber(value) {
            return /^\d+$/.test(value);
        }

        function updateTotal() {
            let total = 0;

            inputs.forEach(input => {
                const val = input.value.trim();

                if (isValidWholeNumber(val)) {
                    total += parseInt(val, 10);
                }
            });

            if (totalDisplay) {
                totalDisplay.value = total;
            }
        }

        inputs.forEach(input => {
            input.addEventListener("input", updateTotal);
        });

        updateTotal();
    </script>

}
